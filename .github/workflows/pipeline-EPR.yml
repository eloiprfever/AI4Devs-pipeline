name: Backend Tests

on:
  pull_request:
    paths:
      - 'backend/**'

jobs:
  setup:
    name: Setup Repository
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('backend/package-lock.json') }}
      
      - name: Cache repository
        uses: actions/cache@v3
        with:
          path: .
          key: repo-${{ github.sha }}

  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: setup
    
    defaults:
      run:
        working-directory: backend
        
    steps:
      - name: Restore cached repository
        uses: actions/cache@v3
        with:
          path: .
          key: repo-${{ github.sha }}
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('backend/package-lock.json') }}
      
      - name: Run tests
        run: npm test

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    
    defaults:
      run:
        working-directory: backend
        
    steps:
      - name: Restore cached repository
        uses: actions/cache@v3
        with:
          path: .
          key: repo-${{ github.sha }}
      
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('backend/package-lock.json') }}
      
      - name: Generate Prisma Client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
      
      - name: Verify build
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "Build successful!"
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: |
            backend/dist
            backend/prisma
            backend/package.json
            backend/package-lock.json
          retention-days: 7

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend-dist
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Create deployment package
        run: |
          cp -r backend-dist deployment
          tar -czf deployment.tar.gz deployment

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to EC2
        run: |
          # Transfer deployment package to EC2
          scp -i ~/.ssh/ec2_key.pem deployment.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
          # Connect to EC2 and deploy
          ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Stop current service if running
            if [ -f "/etc/systemd/system/backend.service" ]; then
              sudo systemctl stop backend
            fi
            
            # Cleanup old deployment
            if [ -d "/opt/backend" ]; then
              sudo rm -rf /opt/backend
            fi
            
            # Extract new deployment
            sudo mkdir -p /opt/backend
            sudo tar -xzf /tmp/deployment.tar.gz -C /opt/backend --strip-components=1
            sudo chown -R $(whoami) /opt/backend
            
            # Install dependencies if needed
            cd /opt/backend
            npm ci --production
            
            # Generate Prisma Client
            npx prisma generate
            
            # Setup or update service
            cat << 'SERVICE' | sudo tee /etc/systemd/system/backend.service
            [Unit]
            Description=Backend API Service
            After=network.target
            
            [Service]
            Type=simple
            User=$(whoami)
            WorkingDirectory=/opt/backend
            ExecStart=/usr/bin/node /opt/backend/index.js
            Restart=on-failure
            
            [Install]
            WantedBy=multi-user.target
            SERVICE
            
            # Start service
            sudo systemctl daemon-reload
            sudo systemctl enable backend
            sudo systemctl start backend
            
            # Cleanup
            rm /tmp/deployment.tar.gz
          EOF
      
      - name: Health check
        run: |
          # Wait for service to start
          sleep 15
          
          # Perform health check
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3000/health)
          
          if [ "$response" == "200" ]; then
            echo "Deployment successful! Health check passed."
          else
            echo "Health check failed with status code: $response"
            exit 1
          fi
